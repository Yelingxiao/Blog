import{_ as a,c as t,o as e,N as s}from"./chunks/framework.af04725e.js";const o="/blog/assets/6.830767ad.webp",r="/blog/assets/7.eb284ae5.webp",l="/blog/assets/8.b051c468.webp",i="/blog/assets/9.26a578a3.webp",n="/blog/assets/10.b4167206.webp",p="/blog/assets/11.6d91e367.webp",x=JSON.parse('{"title":"链表","description":"","frontmatter":{},"headers":[],"relativePath":"computer/algorithms/03.md"}'),c={name:"computer/algorithms/03.md"},h=s('<h1 id="链表" tabindex="-1">链表 <a class="header-anchor" href="#链表" aria-label="Permalink to &quot;链表&quot;">​</a></h1><blockquote><p>链表通过指针将一组零散的内存块串联在一起。其中，我们把内存块称为链表的“结点”。为了将所有的结点串起来，每个链表的结点除了存储数据之外，还需要记录链上的下一个结点的地址。</p></blockquote><p>缓存是一种提高数据读取性能的技术，在硬件设计、软件开发中都有着非常广泛的应用，比如常见的 CPU 缓存、数据库缓存、浏览器缓存等等。</p><p>缓存的大小有限，当缓存被用满时，哪些数据应该被清理出去，哪些数据应该被保留？这就需要缓存淘汰策略来决定。常见的策略有三种：<strong>先进先出策略 FIFO（First In，First Out）、最少使用策略 LFU（Least Frequently Used）、最近最少使用策略 LRU（Least Recently Used）</strong>。</p><p>这些策略你不用死记，我打个比方你很容易就明白了。假如说，你买了很多本技术书，但有一天你发现，这些书太多了，太占书房空间了，你要做个大扫除，扔掉一些书籍。那这个时候，你会选择扔掉哪些书呢？对应一下，你的选择标准是不是和上面的三种策略神似呢？</p><h3 id="存储结构" tabindex="-1">存储结构 <a class="header-anchor" href="#存储结构" aria-label="Permalink to &quot;存储结构&quot;">​</a></h3><p>数组需要一块连续的内存空间来存储，对内存的要求比较高。如果我们申请一个 100MB 大小的数组，当内存中没有连续的、足够大的存储空间时，即便内存的剩余总可用空间大于 100MB，仍然会申请失败。</p><p>而链表恰恰相反，它并不需要一块连续的内存空间，它通过“指针”将一组零散的内存块串联起来使用，所以如果我们申请的是 100MB 大小的链表，根本不会有问题。</p><p><img src="'+o+'" alt=""></p><h3 id="单链表" tabindex="-1">单链表 <a class="header-anchor" href="#单链表" aria-label="Permalink to &quot;单链表&quot;">​</a></h3><p>单链表图中，你应该可以发现，其中有两个结点是比较特殊的，它们分别是<strong>第一个结点和最后一个结点</strong>。我们习惯性地把第一个结点叫作头结点，把最后一个结点叫作尾结点。其中，头结点用来记录链表的基地址。有了它，我们就可以遍历得到整条链表。而尾结点特殊的地方是：指针不是指向下一个结点，而是指向一个空地址 NULL，表示这是链表上最后一个结点。 我们把这个记录下个结点地址的指针叫作<strong>后继指针next</strong>。</p><p><img src="'+r+'" alt=""></p><p>与数组一样，链表也支持数据的查找、插入和删除操作。我们知道，在进行数组的插入、删除操作时，为了保持内存数据的连续性，需要做大量的数据搬移，所以时间复杂度是 O(n)。而在链表中插入或者删除一个数据，我们并不需要为了保持内存的连续性而搬移结点，因为链表的存储空间本身就不是连续的。所以，在链表中插入和删除一个数据是非常快速的。</p><p>从图中我们可以看出，针对链表的插入和删除操作，我们只需要考虑相邻结点的指针改变，所以对应的时间复杂度是 <strong>O(1)</strong>。</p><p><img src="'+l+'" alt=""></p><p>但是，有利就有弊。链表要想随机访问第 k 个元素，就没有数组那么高效了。因为链表中的数据并非连续存储的，所以无法像数组那样，根据首地址和下标，通过寻址公式就能直接计算出对应的内存地址，而是需要根据指针一个结点一个结点地依次遍历，直到找到相应的结点。</p><p>你可以把链表想象成一个队伍，队伍中的每个人都只知道自己后面的人是谁，所以当我们希望知道排在第 k 位的人是谁的时候，我们就需要从第一个人开始，一个一个地往下数。所以，链表随机访问的性能没有数组好，需要 <strong>O(n)</strong> 的时间复杂度。</p><h3 id="循环链表" tabindex="-1">循环链表 <a class="header-anchor" href="#循环链表" aria-label="Permalink to &quot;循环链表&quot;">​</a></h3><p>循环链表是一种特殊的单链表。实际上，循环链表也很简单。它跟单链表唯一的区别就在尾结点。我们知道，单链表的尾结点指针指向空地址，表示这就是最后的结点了。而循环链表的尾结点指针是指向链表的头结点。从我画的循环链表图中，你应该可以看出来，它像一个环一样<strong>首尾相连</strong>，所以叫作“循环”链表。</p><p><img src="'+i+'" alt=""></p><h3 id="双向链表" tabindex="-1">双向链表 <a class="header-anchor" href="#双向链表" aria-label="Permalink to &quot;双向链表&quot;">​</a></h3><p>单向链表只有一个方向，结点只有一个后继指针 next 指向后面的结点。而双向链表，顾名思义，它支持两个方向，每个结点不止有一个后继指针 next 指向后面的结点，还有一个前驱指针 prev 指向前面的结点。</p><p><img src="'+n+'" alt=""></p><h3 id="链表-vs-数组性能大比拼" tabindex="-1">链表 VS 数组性能大比拼 <a class="header-anchor" href="#链表-vs-数组性能大比拼" aria-label="Permalink to &quot;链表 VS 数组性能大比拼&quot;">​</a></h3><p>数组和链表是两种截然不同的内存组织方式。正是因为内存存储的区别，它们插入、删除、随机访问操作的时间复杂度正好相反</p><p><img src="'+p+'" alt=""></p><h3 id="如何基于链表实现-lru-缓存淘汰算法" tabindex="-1">如何基于链表实现 LRU 缓存淘汰算法？ <a class="header-anchor" href="#如何基于链表实现-lru-缓存淘汰算法" aria-label="Permalink to &quot;如何基于链表实现 LRU 缓存淘汰算法？&quot;">​</a></h3><p>我们维护一个有序单链表，越靠近链表尾部的结点是越早之前访问的。当有一个新的数据被访问时，我们从链表头开始顺序遍历链表。</p><ol><li>如果此数据之前已经被缓存在链表中了，我们遍历得到这个数据对应的结点，并将其从原来的位置删除，然后再插入到链表的头部。</li><li>如果此数据没有在缓存链表中，又可以分为两种情况：如果此时缓存未满，则将此结点直接插入到链表的头部；如果此时缓存已满，则链表尾结点删除，将新的数据结点插入链表的头部。</li></ol><p>现在我们来看下缓存访问的时间复杂度是多少。因为不管缓存有没有满，我们都需要遍历一遍链表，所以这种基于链表的实现思路，缓存访问的时间复杂度为 O(n)。</p><p>实际上，我们可以继续优化这个实现思路，比如引入<strong>散列表</strong>（Hash table）来记录每个数据的位置，将缓存访问的时间复杂度降到 O(1)。因为要涉及我们还没有讲到的数据结构，所以这个优化方案，我现在就不详细说了，等讲到散列表的时候，我会再拿出来讲。</p><h3 id="如何写链表" tabindex="-1">如何写链表 <a class="header-anchor" href="#如何写链表" aria-label="Permalink to &quot;如何写链表&quot;">​</a></h3><p>写链表代码是最考验逻辑思维能力的。因为，链表代码到处都是<strong>指针</strong>的操作、边界条件的处理，稍有不慎就容易产生 Bug。链表代码写得好坏，可以看出一个人写代码是否够细心，考虑问题是否全面，思维是否缜密。所以，这也是很多面试官喜欢让人手写链表代码的原因。</p><ul><li>单链表反转</li><li>链表中环的检测</li><li>两个有序的链表</li><li>合并删除链表倒数第 n 个结点</li><li>求链表的中间结点</li></ul>',34),d=[h];function _(b,g,m,u,q,f){return e(),t("div",null,d)}const P=a(c,[["render",_]]);export{x as __pageData,P as default};
