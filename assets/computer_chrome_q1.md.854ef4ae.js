import{_ as e,c as a,o,N as r}from"./chunks/framework.af04725e.js";const u=JSON.parse('{"title":"Chrome架构","description":"","frontmatter":{},"headers":[],"relativePath":"computer/chrome/q1.md"}'),t={name:"computer/chrome/q1.md"},i=r('<h1 id="chrome架构" tabindex="-1">Chrome架构 <a class="header-anchor" href="#chrome架构" aria-label="Permalink to &quot;Chrome架构&quot;">​</a></h1><h2 id="浏览器打开那些进程" tabindex="-1">浏览器打开那些进程 <a class="header-anchor" href="#浏览器打开那些进程" aria-label="Permalink to &quot;浏览器打开那些进程&quot;">​</a></h2><ol><li>主进程: 主要负责界面显示、用户交互、子进程管理，同时提供存储等功能。</li><li>渲染进程: 核心任务是将 HTML、CSS 和 JavaScript 转换为用户可以与之交互的网页，排版引擎 Blink 和 JavaScript 引擎 V8 都是运行在该进程中，默认情况下，Chrome 会为每个 Tab 标签创建一个渲染进程。出于安全考虑，渲染进程都是运行在沙箱模式下。</li><li>网络进程: 主要负责页面的网络资源加载，之前是作为一个模块运行在浏览器进程里面的，直至最近才独立出来，成为一个单独的进程。</li><li>GPU进程: 其实，Chrome 刚开始发布的时候是没有 GPU 进程的。而 GPU 的使用初衷是为了实现 3D CSS 的效果，只是随后网页、Chrome 的 UI 界面都选择采用 GPU 来绘制，这使得 GPU 成为浏览器普遍的需求。最后，Chrome 在其多进程架构上也引入了 GPU 进程。</li><li>插件进程: 主要是负责插件的运行，因插件易崩溃，所以需要通过插件进程来隔离，以保证插件进程崩溃不会对浏览器和页面造成影响。</li><li>Audio进程（有多媒体控件）</li></ol>',3),c=[i];function l(_,h,n,s,m,d){return o(),a("div",null,c)}const C=e(t,[["render",l]]);export{u as __pageData,C as default};
